<?xml version="1.0" encoding="utf-8"?>
<s:Skin xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" 
		xmlns:mx="library://ns.adobe.com/flex/mx"
		creationComplete="skin1_creationCompleteHandler(event)">
	<!-- host component -->
	<fx:Metadata>
		[HostComponent("HostComponents.BeatsHostComponent.BeatsHostComponent")]
	</fx:Metadata>
	

	
	
	
	<fx:Script>
		<![CDATA[
			import Data.DataModel;
			
			import mx.charts.events.ChartItemEvent;
			import mx.collections.ArrayCollection;
			import mx.collections.IList;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			
			import spark.events.IndexChangeEvent;
			
			private var zooming:Boolean;
					
			protected function skin1_creationCompleteHandler(event:FlexEvent):void
			{
//				mSave.contextMenu = hostComponent.treeContextMenu;
				mBeatsTree.contextMenu = hostComponent.treeContextMenu;
			}
			
			[Bindable]
			private var mBeatsListData:ArrayCollection = DataModel.getSingleton().mBeatsList;
			
			[Bindable]
			private var mSelctedUsersFacts:Vector.<Object> = new Vector.<Object>;
			
			[Bindable]
			private var mSelctedAgentFacts:Vector.<Object> = new Vector.<Object>;
			
			protected function mBeatsTree_itemClickHandler(event:ListEvent):void
			{
				var item:Object = Tree(event.currentTarget).selectedItem;
				if (mBeatsTree.dataDescriptor.isBranch(item)) 
				{
					mBeatsTree.expandItem(item, !mBeatsTree.isItemOpen(item), true);
				}
				mBeatDescriptionField.text = mBeatsTree.selectedItem.description;
				mPriorityField.text = mBeatsTree.selectedItem.exclusiveBeatPriority;
				mTypeList.selectedItem = mBeatsTree.selectedItem.type;

				mActivitiesList.dataProvider = mBeatsTree.selectedItem.activities;

				for each(var itm:Object in mBeatsTree.selectedItem.preconditions)
				{
			   		mAffinityMinField.text = itm.affinityMin;
					mAffinityMaxField.text = itm.affinityMax;
					mNerveMinField.text = itm.nerveMin;
					mNerveMaxField.text = itm.nerveMax;
					mBeatsCompletedField.text = itm.beatsCompleted;
				}
				if(mBeatsTree.selectedItem.preconditions)
				{
					if(mBeatsTree.selectedItem.preconditions.length == 0)
					{
						mAffinityMinField.text = "0";
						mAffinityMaxField.text = "100";
						mNerveMinField.text = "0";
						mNerveMaxField.text = "100";
						mBeatsCompletedField.text = "";
					}
				}
//				mBeatTheme.selectedItem = mBeatsTree.selectedItem.xgmlTheme;
				for(var i:int = 0; i < mBeatsListData.length; i ++)
				{
					if(mBeatsTree.selectedItem.xgmlTheme == mBeatsListData[i].xgmlTheme)
					{
						mBeatTheme.selectedItem = mBeatsListData[i];
					}
				}
					
				for(var k:int = 0; k < DataModel.getSingleton().mLocationsList.length; k++)
				{
					if(mBeatsTree.selectedItem.locationId == DataModel.getSingleton().mLocationsList[k].id)
					{
						mLocationList.selectedItem = DataModel.getSingleton().mLocationsList[k];
					}
					
				}
				var mAgentsData:ArrayCollection = DataModel.getSingleton().mAgentsList;
				for(var j:int = 0; j <  mAgentsData.length; j ++)
				{
					if(mBeatsTree.selectedItem.agentId == mAgentsData[j].id)
					{
						mChooseAgentList.selectedItem = mAgentsData[j];
					}
				}
				
				if(mSelctedUsersFacts)
				{
					mSelctedUsersFacts = new Vector.<Object>;
				}
				for each(var itms:Object in mBeatsTree.selectedItem.preconditions)
				{ 
					for(var n:int = 0; n < itms.factsAvailableToUser.length; n ++)
					{
						for(var t:int = 0; t < hostComponent.mFacts.length; t++)
						{
							var fact:Object = hostComponent.mFacts[t];
							if(fact.id == itms.factsAvailableToUser[n])
							{
								mSelctedUsersFacts.push(fact);
							}	
						}			
					}
				}
				mFactsKnownToUser.selectedItems = mSelctedUsersFacts;
				
				
				if(mSelctedAgentFacts)
				{
					mSelctedAgentFacts = new Vector.<Object>;
				}
				for each(var itms:Object in mBeatsTree.selectedItem.preconditions)
				{ 
					for(var n:int = 0; n < itms.factsAvailableToAgent.length; n ++)
					{
						for(var t:int = 0; t < hostComponent.mFacts.length; t++)
						{
							var fact:Object = hostComponent.mFacts[t];
							if(fact.id == itms.factsAvailableToAgent[n])
							{
								//							mCharacterFactItems.addItem(factsOwner);
								trace(fact);
								mSelctedAgentFacts.push(fact);
								
							}	
						}
						
					}
					
					
				}
				mFactsKnownToAgent.selectedItems = mSelctedAgentFacts;
				
				
				
//				mFactsKnownToUser.selectedItems = mSelctedUsersFacts;
//				trace(mBeatsTree.selectedItem.activities);
				
			}
			
			protected function renameItem(event:ListEvent):void
			{
				mBeatsTree.editable = true;
				mBeatsTree.editedItemPosition = {columnIndex:0, rowIndex:mBeatsTree.selectedIndex};
			}
			
			protected function tree1_itemEditEndHandler(event:ListEvent):void
			{
				mBeatsTree.editable = false;
			}
			
			
			
			[Bindable]
			private var expensesAC:ArrayCollection = new ArrayCollection( [
				{ Month: "beat1", Profit: 2000, Expenses: 2500, Amount: 450 },
				{ Month: "beat2", Profit: 1000, Expenses: 200, Amount: 450 },
				{ Month: "beat1", Profit: 1500, Expenses: 500, Amount: 450 },
				{ Month: "beat4", Profit: 1800, Expenses: 1200, Amount: 450 },
				{ Month: "beat5", Profit: 2400, Expenses: 575, Amount: 450 } ]);
			
			protected function combobox1_changeHandler(event:IndexChangeEvent):void
			{
				trace(event);
			}
			
			protected function button1_clickHandler(event:MouseEvent):void
			{
				vaxis.minimum -= 500;
				haxis.minimum -= 500;
			}
			
			protected function button2_clickHandler(event:MouseEvent):void
			{
				vaxis.maximum += 500;
				haxis.maximum += 500;
			}
			
			[Bindable]
			private var tmp:Array = new Array();
			
			protected function drawLabels(event:FlexEvent):void
			{
				canvas.clear();
				canvas.beginFill(0xFF0033, 1);      
				canvas.drawCircle("beat1", 2000, 20);      
				canvas.endFill();
				
				var idLabels:Label = new Label();
				idLabels.text = "id 3";
				canvas.addChild(idLabels);
				canvas.updateDataChild(idLabels, "beat1",2000 );
			}
			
			private function connectTwoPoints(month1:String, value1:Number,month2:String,value2:Number):void
			{
				canvas.clear();
				canvas.lineStyle(4, 
					0xCCCCCC, 
					.75, 
					true, 
					LineScaleMode.NORMAL, 
					CapsStyle.ROUND, 
					JointStyle.MITER, 
					2
				);
				canvas.moveTo(month1, value1);
				canvas.lineTo(month2, value2);
				
//				l1.text = "Month: " + month1;
//				l2.text = "Profit: " + value1;
//				l3.text = "Month: " + month2;
//				l4.text = "Profit: " + value2;
				
//				chartHasLine = true;
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<s:SolidColor id="sc1" color="yellow" alpha="1"/>
		<s:SolidColorStroke id="stroke1" color="black" weight="2"/>
		
		<s:Resize id="showBeatsTree" target="{mTreeBorderContainer}" widthTo="200" duration="500"/>
		<s:Resize id="hideBeatsTree" target="{mTreeBorderContainer}" widthTo="0" duration="500"/>
	</fx:Declarations>
	
	<s:Scroller width="100%" 
				height="100%">
		<s:VGroup width="100%" height="100%" id="VerticalContentGroup">
			<s:HGroup>
				<s:TextInput id="mSearchField"
							 width="300"
							 prompt="Search"/>
				<!--<s:ComboBox width="361" change="combobox1_changeHandler(event)"
							dataProvider="{hostComponent.mFacts}" labelField="id"/>-->
				<s:Button id="mRefreshSearch"
						  label="Refresh"/>
							 
			</s:HGroup>
			<s:HGroup width="100%">
				<s:BorderContainer id="mTreeBorderContainer"
								   width="200" 
								   height="100%" 
								   backgroundAlpha="0" 
								   borderStyle="inset" 
								   borderWeight="1">
					<s:HGroup width="100%" 
							  height="100%">
							<mx:Tree id="mBeatsTree" 
									 width="100%"
									 height="100%" 
									 allowMultipleSelection="true"
									 labelField="description"
									 doubleClickEnabled="true"
									 dragEnabled="true"
									 dragMoveEnabled="true"
									 dropEnabled="true"
									 horizontalCenter="0"
									 itemDoubleClick="renameItem(event)"
									 itemEditEnd="tree1_itemEditEndHandler(event)"
									 showRoot="true"
									 borderVisible="false"
									 itemClick="mBeatsTree_itemClickHandler(event)"
									 contentBackgroundAlpha="0"
									 verticalScrollPolicy="auto"
									 dataProvider="{hostComponent.mBeatsData}">
								
								<!--<mx:XMLListCollection id="MailBox">
									<fx:XMLList>
										<Description label="Mail">
											<folder label="INBOX"/>
											<folder label="Personal Folder">
												<Pfolder label="Business" />
												<Pfolder label="Demo" />
												<Pfolder label="Personal" isBrunch="true"/>
												<Pfolder label="Saved Mail" />
											</folder>
											<folder label="Sent" />
											<folder label="Trash" />
											<folder label="INBOX"/>
											<folder label="Personal Folder">
												<Pfolder label="Business" />
												<Pfolder label="Demo" />
												<Pfolder label="Personal" isBrunch="true"/>
												<Pfolder label="Saved Mail" />
											</folder>
											<folder label="Sent" />
											<folder label="Trash" />
											<folder label="INBOX"/>
											<folder label="Personal Folder">
												<Pfolder label="Business" />
												<Pfolder label="Demo" />
												<Pfolder label="Personal" isBrunch="true"/>
												<Pfolder label="Saved Mail" />
											</folder>
											<folder label="Sent" />
											<folder label="Trash" />
											<folder label="INBOX"/>
											<folder label="Personal Folder">
												<Pfolder label="Business" />
												<Pfolder label="Demo" />
												<Pfolder label="Personal" isBrunch="true"/>
												<Pfolder label="Saved Mail" />
												<folder label="Personal Folder">
													<Pfolder label="Business" />
													<Pfolder label="Demo" />
													<Pfolder label="Personal" isBrunch="true"/>
													<Pfolder label="Saved Mail" />
													<folder label="Personal Folder">
														<Pfolder label="Business" />
														<Pfolder label="Demo" />
														<Pfolder label="Personal" isBrunch="true"/>
														<Pfolder label="Saved Mail" />
														<folder label="Personal Folder">
															<Pfolder label="Business" />
															<Pfolder label="Demo" />
															<Pfolder label="Personal" isBrunch="true"/>
															<Pfolder label="Saved Mail" />
															<folder label="Personal Folder">
																<Pfolder label="Business" />
																<Pfolder label="Demo" />
																<Pfolder label="Personal" isBrunch="true"/>
																<Pfolder label="Saved Mail" />
															</folder>
														</folder>
													</folder>
												</folder>
											</folder>
											<folder label="Sent" />
											<folder label="Trash" />
											<folder label="INBOX"/>
											<folder label="Personal Folder">
												<Pfolder label="Business" />
												<Pfolder label="Demo" />
												<Pfolder label="Personal" isBrunch="true"/>
												<Pfolder label="Saved Mail" />
											</folder>
											<folder label="Sent" />
											<folder label="Trash" />
											<folder label="INBOX"/>
											<folder label="Personal Folder">
												<Pfolder label="Business" />
												<Pfolder label="Demo" />
												<Pfolder label="Personal" isBrunch="true"/>
												<Pfolder label="Saved Mail" />
											</folder>
											<folder label="Sent" />
											<folder label="Trash" />
										</Description>
									</fx:XMLList>
								</mx:XMLListCollection>-->
							</mx:Tree>
					</s:HGroup>
				</s:BorderContainer>
				<s:ToggleButton id="mTreeStateBtn"
								skinClass="Skins.SwitchButtonSkin.SwitchToggleButtonSkin"/>
				<s:BorderContainer id="mBeatsGraphBorderContainer"
								   width="100%"
								   height="100%">
					<mx:Canvas label="Canvas 2" width="100%" height="100%" > 
						<!--<mx:Panel height="100%" width="100%">-->	
							<s:Group width="100%">
								
								<mx:BubbleChart id="mBeatChart" 
												height="100%" width="100%"
												paddingRight="5" paddingLeft="5" 
												showDataTips="false"
												maxRadius="20"
												dataProvider="{DataModel.getSingleton().mBeatsList}"
												showAllDataTips="false"
												dragEnabled="true"
												dragMoveEnabled="true"
												dropEnabled="true"
												selectionMode="multiple" color="0xFFFFFF" 
												backgroundElements="{tmp}" 
												creationComplete="drawLabels(event)">
									<mx:annotationElements>
										<mx:CartesianDataCanvas id="canvas" includeInRanges="true"/>
									</mx:annotationElements>								
									<!--ZOOM-->
									<mx:horizontalAxis>
										<mx:LinearAxis id="haxis"/>
									</mx:horizontalAxis>
									<mx:verticalAxis>
										<mx:LinearAxis id="vaxis"/>
									</mx:verticalAxis>	
									<!--end ZOOM-->	
									<mx:series>
										<mx:BubbleSeries id="mBeatSeries"
											xField="id"
											yField="id"
											radiusField="mBeatRadius"
											fill="{sc1}"
											stroke="{stroke1}"/>
									</mx:series> 									
								</mx:BubbleChart>            
								<!--<mx:Legend dataProvider="{mBeatChart}"/>-->
								<s:HGroup width="100%" horizontalAlign="right">
									<s:Button id="mAddBeat" x="-6" width="80" label="Add beat" click="connectTwoPoints('beat1', 2000, 'beat2', 1000);"/>
									<s:VGroup horizontalAlign="center">
										<s:Button width="35" label="-" click="button1_clickHandler(event)"/>
										<s:Button width="35" label="+" click="button2_clickHandler(event)"/>
									</s:VGroup>
								</s:HGroup>
							</s:Group>
							            
						<!--</mx:Panel>-->
					</mx:Canvas>	
				</s:BorderContainer>
			</s:HGroup>
			
			
			<s:HGroup width="100%" right="10">
				<s:VGroup>
					<!--<s:DropDownList id="mAgentList"
					labelField="label"
					width="90"
					prompt="Select agent"/>-->
					<!-- here must be visualization component of connections... -->
					<s:Label text="Description:"/>
					<s:TextArea id="mBeatDescriptionField"
								width="100%"
								height="76"
								prompt="Enter description"/>
					<s:HGroup width="100%" 
							  verticalAlign="middle">
						<s:HGroup width="100%" 
								  verticalAlign="middle">
							<s:Label text="Agent:"/>
							<s:DropDownList id="mChooseAgentList"
											width="90"
											prompt="Choose agent"
											labelField="name"
											dataProvider="{DataModel.getSingleton().mAgentsList}"/>	
						</s:HGroup>
						<s:HGroup width="100%"
								  horizontalAlign="center"
								  verticalAlign="middle">
							<s:Label text="XGML Theme:"/>
						</s:HGroup>
						<s:HGroup width="100%"
								  horizontalAlign="right">
							<s:DropDownList id="mBeatTheme" x="-38" width="128"
											dataProvider="{mBeatsListData}" labelField="xgmlTheme"
											prompt="Choose XGML theme"/>
						</s:HGroup>	
					</s:HGroup>
					
					<s:HGroup width="100%"
							  verticalAlign="middle">
						<s:Label width="33" text="Type:"/>
						<s:DropDownList id="mTypeList"
										width="90"
										selectedItem="normal"
										dataProvider="{hostComponent.beatTypeList}"/>	
						<s:HGroup width="100%"
								  verticalAlign="middle">
							<s:HGroup width="80" horizontalAlign="left">
								<s:Label text="Priority:"/>	
							</s:HGroup>
							<s:HGroup width="100%"
									  horizontalAlign="left">
								<s:TextInput id="mPriorityField"
											 text="0"
											 width="50"
											 restrict="0-9"
											 maxChars="3"/>
							</s:HGroup>
						</s:HGroup>
					</s:HGroup>
					<s:Label text="Activities:"/>
					<s:List id="mActivitiesList"
								width="100%" labelField="activities"/>
					<s:HGroup width="100%"
							  horizontalAlign="center">
						<s:Button id="mSave"
								  label="SAVE" 
								  width="100%"/>
						<s:Button id="mDelete"
								  label="DELETE" 
								  width="100%"/>
					</s:HGroup>
				</s:VGroup>
				<s:VGroup width="100%">
					<s:Label text="Preconditions" 
							 fontWeight="bold" 
							 fontSize="14" 
							 color="0x000000"/>
					<s:HGroup verticalAlign="middle">
						<s:Label text="Beats completed:"/>
						<s:TextInput id="mBeatsCompletedField"
									 prompt="Comma - separated list fo ids"
									 width="120"/>	
					</s:HGroup>
					<s:HGroup
						verticalAlign="middle">
						<s:HGroup width="92" horizontalAlign="left">
							<s:Label text="Location:"/>	
						</s:HGroup>
						<s:DropDownList id="mLocationList"
										width="120"
										prompt="Choose location"
										labelField="name"
										dataProvider="{DataModel.getSingleton().mLocationsList}"/>
					</s:HGroup>
					<s:Label text="Facts known to user:"/>
					<s:DataGrid id="mFactsKnownToUser" 
								width="300"
								requestedRowCount="4"
								rowHeight="25"
								dataProvider="{hostComponent.mFacts}" selectionMode="multipleRows" selectionColor="0x808080">
						<s:columns>
							<s:ArrayList>
								<s:GridColumn dataField="id" headerText="id" width="30"/>
								<s:GridColumn dataField="description" headerText="Description"/>
							</s:ArrayList>
						</s:columns>
					</s:DataGrid>
					<s:Label text="Facts known to agent:"/>
					<s:DataGrid id="mFactsKnownToAgent"
								width="300"
								requestedRowCount="4"
								rowHeight="25"
								dataProvider="{hostComponent.mFacts}" selectionMode="multipleRows" selectionColor="0x808080">
						<s:columns>
							<s:ArrayList>
								<s:GridColumn dataField="id" headerText="id" width="30"/>
								<s:GridColumn dataField="description" headerText="Description"/>
							</s:ArrayList>
						</s:columns>
					</s:DataGrid>
				</s:VGroup>	
				<s:VGroup height="100%" width="100%">
					<!--<s:Label text="Preconditions" 
					fontWeight="bold" 
					fontSize="14" 
					color="0x000000"/>
					<s:Label text="Description:"/>
					<s:TextArea id="mPreconditionsDescriptionField"
					prompt="Enter description"
					width="300"/>-->
					<s:Spacer/>
					<s:Spacer/>
					<s:Spacer/>					
					<s:HGroup width="100%"
							  horizontalAlign="center"
							  verticalAlign="middle" top="100">
						<s:HGroup>
							<s:Label text="Affinity:" 
									 textAlign="center"/>	
						</s:HGroup>
						<s:TextInput id="mAffinityMinField"
									 text="0"
									 width="50"
									 restrict="0-9"
									 maxChars="3"/>
						<s:TextInput id="mAffinityMaxField"
									 text="0"
									 width="50"
									 restrict="0-9"
									 maxChars="3"/>
					</s:HGroup>
					<s:HGroup width="100%"
							  horizontalAlign="center"
							  verticalAlign="middle">
						<s:HGroup>
							<s:Label text="Nerve:" 
									 textAlign="center"/>	
						</s:HGroup>
						<s:TextInput id="mNerveMinField" 
									 text="0"
									 width="50"
									 restrict="0-9"
									 maxChars="3"/>
						<s:TextInput id="mNerveMaxField"
									 text="0"
									 width="50"
									 restrict="0-9"
									 maxChars="3"/>
					</s:HGroup>
					<s:Label text="Memory:" 
							 textAlign="center"/>
					<s:DataGrid id="mBeatVariableList" width="100%" requestedRowCount="10"
								dataProvider="{hostComponent.mBeatVariables}" rowHeight="25">
						<s:columns>
							<s:ArrayList>
								<s:GridColumn dataField="variable" headerText="Variable"/>
								<s:GridColumn dataField="value" headerText="Value"/>
							</s:ArrayList>
						</s:columns>
					</s:DataGrid>
				</s:VGroup>
			</s:HGroup>	
		</s:VGroup>
	</s:Scroller>
</s:Skin>
