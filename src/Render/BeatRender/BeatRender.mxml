<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/mx" 
				autoDrawBackground="false"
				creationComplete="itemrenderer1_creationCompleteHandler(event)"
				mouseOver="itemrenderer1_mouseOverHandler(event)"
				mouseOut="itemrenderer1_mouseOutHandler(event)"
				mouseDown="itemrenderer1_mouseDownHandler(event)"
				mouseMove="itemrenderer1_mouseMoveHandler(event)" 
				dragEnter="itemrenderer1_dragEnterHandler(event)"
				dragStart="itemrenderer1_dragStartHandler(event)">
	<!--<s:states>
		<s:State name="normal"/>
		<s:State name="hovered"/>
		<s:State name="select"/>
	</s:states>-->
	
	<fx:Script>
		<![CDATA[
			import flash.sampler.NewObjectSample;
			
			import mx.charts.DateTimeAxis;
			import mx.charts.LinearAxis;
			import mx.charts.chartClasses.CartesianTransform;
			import mx.charts.series.BubbleSeries;
			import mx.core.UIComponent;
			import mx.events.DragEvent;
			import mx.events.FlexEvent;
			import mx.graphics.IFill;
			
			import spark.components.Label;
			
			[Bindable]
			private var beatData:Object;
			
			private var mWhiteBeat:uint = 0xFFFFFF;
			private var mOrangeBeat:uint = 0xFFA500;
			private var mGreenBeat:uint = 0x008000;
			
			private var graphicalContainer:UIComponent = new UIComponent();
			
			[Bindable]
			private var mBeatColor:uint;
			
			[Bindable]
			private var mBeatStrokeColor:uint;
			
			////////////////////////////////
			private var stageX:Number;
			private var stageY:Number;
			private var dataX:Number;
			private var dataY:Number;
			
			
			private var hAxis:DateTimeAxis;
			private var vAxis:LinearAxis;
			
			private var hMin:Number;
			private var hMax:Number;
			private var vMin:Number;
			private var vMax:Number;
			
			protected function itemrenderer1_creationCompleteHandler(event:FlexEvent):void
			{
				mBeatStrokeColor = 0x000000;
				
				
				beatData = data;
				
				
				
				
//				mNormalGroupState.addElement(graphicalContainer);
				
				var  beat:Sprite = new Sprite();
				
				beat.graphics.clear();
				
				switch(beatData.item.type)
				{
					case "normal":
						//color = FFFFFF;
						mBeatColor = mWhiteBeat;
						break;
					case "exclusive":
						//color = FFA500
						mBeatColor = mOrangeBeat;
						break;
					case "repeated":
						//color = green
						mBeatColor = mGreenBeat;	
						break;
					default:
						//
						break;
					
				}
				
				/*beat.graphics.beginFill(beatColor, 1);      
				beat.graphics.lineStyle(1, 0x000000);
				beat.graphics.drawCircle(0.5*this.width, 0.5*this.height, 0.5*this.width);
				beat.graphics.endFill();
				beat.mouseEnabled = false;
				beat.mouseChildren = false;
				addElement(graphicalContainer);
				graphicalContainer.addChild(beat);*/
				
				
				
				
				/*var idLabel:TextField = new TextField();
//				idLabel.height = 20;
				idLabel.mouseEnabled = false;
				
				idLabel.autoSize = TextFieldAutoSize.LEFT;
				idLabel.text = "" + beatData.item.beatId;
				
				var idLabelTextFormatter:TextFormat = new TextFormat();
				idLabelTextFormatter.color = 0x000000;
				idLabelTextFormatter.font = "Verdana";
				idLabelTextFormatter.bold = true;
				idLabelTextFormatter.size = 12;
				
				//				idLabel.defaultTextFormat = idLabelTextFormatter;
				idLabel.setTextFormat(idLabelTextFormatter);
				
				graphicalContainer.addChild(idLabel);
				
				var descriptionLabel:TextField = new TextField();
//				descriptionLabel.height
				descriptionLabel.text = "" + beatData.item.beatDescription;
				descriptionLabel.autoSize = TextFieldAutoSize.LEFT;
				descriptionLabel.x = 40;
				descriptionLabel.setTextFormat(idLabelTextFormatter);
				graphicalContainer.addChild(descriptionLabel);*/
			}
			
			protected function mNormalGroupState_clickHandler(event:MouseEvent):void
			{
//				event.stopImmediatePropagation();
			}
			
			protected function mHoveredGroupState_clickHandler(event:MouseEvent):void
			{
//				event.stopImmediatePropagation();
			}
			
			protected function itemrenderer1_mouseOverHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				mBeatStrokeColor = 0x0000FF;
			}
			
			protected function itemrenderer1_mouseOutHandler(event:MouseEvent):void
			{
				mBeatStrokeColor = 0x000000;
			}
			
			protected function itemrenderer1_mouseDownHandler(event:MouseEvent):void
			{
				hAxis = DateTimeAxis(BubbleSeries(parent).getAxis(CartesianTransform.HORIZONTAL_AXIS));
				vAxis = LinearAxis(BubbleSeries(parent).getAxis(CartesianTransform.VERTICAL_AXIS));
				hMin = hAxis.minimum.time;
				hMax = hAxis.maximum.time;
				vMin = vAxis.minimum;
				vMax = vAxis.maximum;
				
				stageX = event.stageX;
				stageY = event.stageY;
				
				dataX = data.item.beatPosX;
				dataY = data.item.beatY;
			}
			
			protected function itemrenderer1_mouseMoveHandler(event:MouseEvent):void
			{
				
			}
			
			protected function itemrenderer1_dragEnterHandler(event:DragEvent):void
			{

			}
			
			protected function itemrenderer1_dragStartHandler(event:DragEvent):void
			{
				var dtTermino:Number = dataX + (event.stageX - stageX) * (hMax - hMin) / parent.width;
				if (dtTermino >= hMin && dtTermino <= hMax)
				{
					data.item.dtTermino = new Date(dtTermino);
				}
				
				var andamento:Number = Math.round(dataY + (stageY - event.stageY) * 100 / parent.height);
				if (andamento >= vMin && andamento <= vMax)
				{
					//					_data.item.andamento = andamento;
				}
			}
			
		]]>
	</fx:Script>
	
	<s:Group id="mNormalGroupState" width="100%" height="100%" click="mNormalGroupState_clickHandler(event)">
		<!--<s:Rect width="100%" height="100%">                              
			<s:stroke>
				<s:SolidColorStroke color="0x000000" weight="2"/>
			</s:stroke>
			<s:fill>
				<s:SolidColor color="0x551122"/>
			</s:fill>
		</s:Rect>-->
		<s:Ellipse width="25" height="25">
			<s:stroke>
				<s:SolidColorStroke color="#000000" weight="1"/>
			</s:stroke>
			<s:fill>
				<s:SolidColor color="{mBeatColor}"/>
			</s:fill>
		</s:Ellipse>
	</s:Group>
	
	<s:Group id="mHoveredGroupState"  click="mHoveredGroupState_clickHandler(event)">
		<s:Ellipse width="25" height="25" id="mEllipse">
			<s:stroke>
				<s:SolidColorStroke color="{mBeatStrokeColor}" weight="3"/>
			</s:stroke>
			<s:fill>
				<s:SolidColor color="{mBeatColor}"/>
			</s:fill>
		</s:Ellipse>
	</s:Group>
		
	<!--<s:Group id="mSelectedGroupState" includeIn="select">
		<s:Ellipse width="28" height="28">
			<s:stroke>
				<s:SolidColorStroke color="#9900FF" weight="5"/>
			</s:stroke>
			<s:fill>
				<s:SolidColor color="{mColor}"/>
			</s:fill>
		</s:Ellipse>
	</s:Group>-->
	<s:Label id="mBeatIdLabel" 
			 text="{beatData.item.beatId}" 
			 left="7" top="7" 
			 color="0x000000"/>
	<s:Label id="mBeatdescription"
			 text="{beatData.item.beatDescription}"
			 left="30" top="7"
			 color="0x000000"/>
</s:ItemRenderer>
